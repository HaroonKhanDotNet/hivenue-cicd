##################################################
#                                                #
#  Project: CI/CD Pipeline                       #
#  Phase II: Continuous Delivery (Staging)       #
#  Module: Backend (API)                         #
#  Tech: Github Actions                          #
#  Client: Hivenue.ca (Nassim, Louenas, Hanson)  #
#  Author: BTC6 (Alejandro, Jayme, Haroon)       #
#  Referees: Riipen.com and ICTC BTC             #
#  Last Update: Sun 2024 Dec 01                  #
#                                                #
##################################################

name: CD-backend-workflow.yaml # ${{ github.workflow }}

on: 
  workflow_dispatch:   # manual trigger
  push:  # trigger the workflow when new commit is pushed, including after a merge
  pull_request:  # run in the source branch context on target branch merge-commit simulation to validate the future merge on target
    types:  # default pull-request lifecycle types opened, synchronize or reopened PR's
      - opened  # trigger when a new pull request is created
      - synchronize  # trigger when commits are added, removed, or updated to an open pull request
      - reopened  # trigger when a pull-request reopen

jobs:

  cd_backend_job:
    name: CD backend job
    
    # matrix strategy - run the workflow with all available combination of os, nodejs versions
    strategy:
      matrix:
        os: 
          - ubuntu-latest
          # - windows-latest
          # - macos-latest
        nodejs:
          - 18.***
          # - 18.x
          # - 20.x
          # - 22.x

    permissions:
      contents: write
      actions: write

    runs-on: ${{ matrix.os }}  # matrix os of the runner (vm)

    env:
      REMOTE_HOST: ${{ secrets.STAGE_HOST }}
      REMOTE_USER: ${{ secrets.STAGE_USER }}
      REMOTE_PASSWORD: ${{ secrets.STAGE_PASSWORD }}
      
    steps:

      - name: Notification init
        run: | 
          echo "notify_sign=':white_check_mark:'" >> $GITHUB_ENV
          echo "notify_fail=':'" >> $GITHUB_ENV
          echo "notify_pass=':'" >> $GITHUB_ENV

      - name: is PR mergeable
        id: pr_mergeable
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ] && [ "${{ github.event.pull_request.mergeable }}" == "null" ]; then
            pr_msg='Error: unknown merge status - trigger workflow again'
            echo "notify_sign=':x:'" >> $GITHUB_ENV
            echo "notify_fail=$notify_fail:$pr_msg" >> $GITHUB_ENV
            
            echo "$pr_msg"
            exit 1
          fi
          if [ "${{ github.event_name }}" == "pull_request" ] && [ "${{ github.event.pull_request.mergeable }}" == "false" ]; then
            pr_msg='Error: merge conflict - the PR is not mergeable'
            echo "notify_sign=':x:'" >> $GITHUB_ENV
            echo "notify_fail=$notify_fail:$pr_msg" >> $GITHUB_ENV
            echo "$pr_msg"
            exit 1
          fi

      # get the latest commit from current owner/repository/branch to runner home ($GITHUB_WORKSPACE)
      - name: checkout backend
        uses: actions/checkout@v4
            
      - name: get commit message
        run: echo "last_commit=$(git log -1 --pretty=%B | tr '\n' ' ' | sed 's/[\r]//g; s/%/%%/g; s/["]/\\"/g; s/\n/\\n/g')" >> $GITHUB_ENV
      
      # install given node runtime version and add it to the runner PATH
      - name: setup node
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.nodejs }}  # matrix node version
          
      ###### Project Build Delivery      

      # copy production-only files and folders to new folder dist/
      # "build": "mkdir -p dist && rsync -av --exclude='.*' --exclude=README.md --exclude=docker-compose.yml --exclude=jest.config.js --exclude='migrate-mongo-config.js' --exclude=migrations/ --exclude=tests/ . dist/"
      - name: build dist/
        run: |
          set -e

          mkdir -p dist
          rsync -av  \
          --exclude='.*'  \
          --exclude=README.md  \
          --exclude=docker-compose.yml  \
          --exclude=jest.config.js  \
          --exclude='migrate-mongo-config.js'  \
          --exclude=migrations/  \
          --exclude=tests/  \
          . dist/ 2>&1 | tee dist.txt 
          # npm run build 2>&1 | tee dist.txt
          exit_code=${PIPESTATUS[0]}
          dist_msg='dist(dist.md)'

          if [ $exit_code -ne 0 ]; then
            echo '`FAIL`' >> dist.md
            echo "notify_sign=':x:'" >> $GITHUB_ENV
            echo "notify_fail=$notify_fail:$dist_msg" >> $GITHUB_ENV
          else
            echo '`PASS`' >> dist.md
            echo "notify_pass=$notify_pass:$dist_msg" >> $GITHUB_ENV
          fi

          echo "$dist_msg" >> dist.md
          echo '```js' >> dist.md
          cat dist.txt >> dist.md
          echo '```' >> dist.md

          echo $exit_code:$dist_msg
          exit $exit_code

          set +e

      - name: tree dist/
        run: |
          
          echo '```js' >> dist.md
          tree dist | tee -a dist.md
          echo '```' >> dist.md

      - name: replace 'local'
        run: |
          set -e

          # get the current day, date:time and timzezone
          dtm=$(date "+%a, %Y-%m-%d, %I:%M %p %Z")
          
          # enable shell-option globstar which allow recursive file matching with ** wildcard
          shopt -s globstar

          # Replace all occurences of 'local' with 'riipen' recursively in all subdirectories **routes/system.js and **utils/log.js
          sed -i "s|local|${{ github.repository }}@${{ github.ref_name }}: $dtm|g" dist/**/*routes*/system.js dist/**/*utils*/log.js 2>&1 | tee sed.txt
          exit_code=${PIPESTATUS[0]}
          sed_msg='replacelocal(dist.md)'

          if [ $exit_code -ne 0 ]; then
            echo '`FAIL`' >> dist.md
            echo "notify_sign=':x:'" >> $GITHUB_ENV  # set :warning: sign for slack/discord notification
            echo "notify_fail=$notify_fail:$sed_msg" >> $GITHUB_ENV
          else
            echo '`PASS`' >> dist.md
            echo "notify_pass=$notify_pass:$sed_msg" >> $GITHUB_ENV
          fi

          echo "$sed_msg" >> dist.md
          echo '```js' >> dist.md
          cat sed.txt >> dist.md
          echo '```' >> dist.md

          echo '```js' >> dist.md
          echo 'log.js' >> dist.md
          cat dist/**/*utils*/log.js >> dist.md
          echo '```' >> dist.md
          
          echo '```js' >> dist.md
          echo 'system.js' >> dist.md
          cat dist/**/*routes*/system.js >> dist.md
          echo '```' >> dist.md

          echo $exit_code:$sed_msg
          exit $exit_code

          set +e

      - name: build production
        run: |
          set -e
          
          cd dist

          # install ci prod and do not run any script in package.json
          npm ci --omit=dev --ignore-scripts 2>&1 | tee ../npm-build.txt
          exit_code=${PIPESTATUS[0]}
          build_msg='build(npm-build.md)'

          if [ $exit_code -ne 0 ]; then
            echo '`FAIL`' >> ../npm-build.md
            echo "notify_sign=':x:'" >> $GITHUB_ENV  # set :warning: sign for slack/discord notification
            echo "notify_fail=$notify_fail:$build_msg" >> $GITHUB_ENV
          else
            echo '`PASS`' >> ../npm-build.md
            echo "notify_pass=$notify_pass:$build_msg" >> $GITHUB_ENV
          fi

          echo "$build_msg" >> ../npm-build.md
          echo '```js' >> ../npm-build.md
          cat ../npm-build.txt >> ../npm-build.md
          echo '```' >> ../npm-build.md

          echo $exit_code:$build_msg
          exit $exit_code

          set +e
          
      - name: install dotenv  # this should be in production dependency
        run: | 
          set -e

          cd dist
          npm install dotenv  2>&1 | tee ../npm-build.txt
          exit_code=${PIPESTATUS[0]}
          build_msg='dotenv(npm-build.md)'

          if [ $exit_code -ne 0 ]; then
            echo '`FAIL`' >> ../npm-build.md
            echo "notify_sign=':x:'" >> $GITHUB_ENV  # set :warning: sign for slack/discord notification
            echo "notify_fail=$notify_fail:$build_msg" >> $GITHUB_ENV
          else
            echo '`PASS`' >> ../npm-build.md
            echo "notify_pass=$notify_pass:$build_msg" >> $GITHUB_ENV
          fi

          echo "$build_msg" >> ../npm-build.md
          echo '```js' >> ../npm-build.md
          cat ../npm-build.txt >> ../npm-build.md
          echo '```' >> ../npm-build.md

          echo $exit_code:$build_msg
          exit $exit_code

          set +e

      - name: tree build
        run: |
          echo '```js' >> npm-build.md
          echo 'dist/build' >> npm-build.md
          tree dist | tee -a npm-build.md
          echo '```' >> npm-build.md

      - name: stage prep
        run: | 
          set -e
          
          (sshpass -p "$REMOTE_PASSWORD" ssh -o StrictHostKeyChecking=no "$REMOTE_USER@$REMOTE_HOST" 'rm -rf /***/api && mkdir -p /***/api') 2>&1 | tee stage.txt
          exit_code=${PIPESTATUS[0]}
          stage_msg='recycle(stage.md)'

          if [ $exit_code -ne 0 ]; then
            echo '`FAIL`' >> stage.md
            echo "notify_sign=':x:'" >> $GITHUB_ENV
            echo "notify_fail=$notify_fail:$stage_msg" >> $GITHUB_ENV
          else
            echo '`PASS`' >> stage.md
            echo "notify_pass=$notify_pass:$stage_msg" >> $GITHUB_ENV
          fi

          echo "$stage_msg" >> stage.md
          echo '```js' >> stage.md
          cat stage.txt >> stage.md
          echo '```' >> stage.md

          echo $exit_code:$stage_msg
          exit $exit_code

          set +e
          
      - name: stage deploy
        run: |
          set -e
          
          (sshpass -p "$REMOTE_PASSWORD" rsync -avz --delete -e 'ssh -o StrictHostKeyChecking=no' dist/ "$REMOTE_USER@$REMOTE_HOST:/***/api") 2>&1 | tee stage.txt

          exit_code=${PIPESTATUS[0]}
          stage_msg='deploy(stage.md)'

          if [ $exit_code -ne 0 ]; then
            echo '`FAIL`' >> stage.md
            echo "notify_sign=':x:'" >> $GITHUB_ENV
            echo "notify_fail=$notify_fail:$stage_msg" >> $GITHUB_ENV
          else
            echo '`PASS`' >> stage.md
            echo "notify_pass=$notify_pass:$stage_msg" >> $GITHUB_ENV
          fi

          echo "$stage_msg" >> stage.md
          echo '```js' >> stage.md
          cat stage.txt >> stage.md
          echo '```' >> stage.md

          echo $exit_code:$stage_msg
          exit $exit_code

          set +e

      - name: stage start
        run: |
          set -e
          
          (sshpass -p "$REMOTE_PASSWORD" ssh -o StrictHostKeyChecking=no "$REMOTE_USER@$REMOTE_HOST" "
              cd /***/api &&
              cp /***/environments/backend/.env . &&
              chown $REMOTE_USER -R . &&
              systemctl restart hivenue-***
            ")  2>&1 | tee stage.txt

          exit_code=${PIPESTATUS[0]}
          stage_msg='start(stage.md)'

          if [ $exit_code -ne 0 ]; then
            echo '`FAIL`' >> stage.md
            echo "notify_sign=':x:'" >> $GITHUB_ENV
            echo "notify_fail=$notify_fail:$stage_msg" >> $GITHUB_ENV
          else
            echo '`PASS`' >> stage.md
            echo "notify_pass=$notify_pass:$stage_msg" >> $GITHUB_ENV
          fi

          echo "$stage_msg" >> stage.md
          echo '```js' >> stage.md
          cat stage.txt >> stage.md
          echo '```' >> stage.md

          echo $exit_code:$stage_msg
          exit $exit_code

          set +e

      - name: trigger e2e-playwright-workflow.yaml (***/e2e-playwright)
        env:
          e2e_pat: ***
        run: |                   
          curl -L \
              -X POST https://api.github.com/repos/***/e2e-playwright/dispatches \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: Bearer ${{ env.e2e_pat }}" \
              -H "Content-Type: application/json" \
              -H "X-GitHub-Api-Version: 2022-11-28" \
              -d '{"event_type":"CD-backend-workflow.yaml","client_payload":{"e2e-url": "https://***.hivenue.ca/"}}'
  
      - name: upload .md reports
        id: CD_backend_reports
        continue-on-error: true
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: CD backend reports
          path: |  # Required - A file, directory or wildcard pattern that describes what to upload
            dist.md
            npm-build.md
            stage.md
            
          overwrite: true
          include-hidden-files: true

        # discord webhook: https://discord.com/api/webhooks/***
      - name: discord notification
        continue-on-error: true
        if: always()
        run: |
          curl -X POST ${{ secrets.DISCORD_WEBHOOK }} \
          -H "Content-Type: application/json" \
          -d '{ "content": "${{ env.notify_sign }} **Workflow:** `${{ github.workflow }}` **Of Repo:** `${{ github.repository }}@${{ github.ref_name }}`\n**Triggered On:** `${{ github.event_name }}` **By User:** `${{ github.actor }}`\n**Commit Msg:** `${{ env.last_commit }}`\n**Pass:** `${{ env.notify_pass }}`\n**Fail:** `${{ env.notify_fail }}`\n**Artifacts:** ${{ steps.CD_backend_reports.outputs.artifact-url }} `Expiring in 90 Days`"}'
          
        # slack webhook: https://hooks.slack.com/services/***
      - name: slack notification
        continue-on-error: true
        if: always()
        run: |
          curl -X POST ${{ secrets.SLACK_WEBHOOK }} \
          -H "Content-Type: application/json" \
          -d '{ "text": "${{ env.notify_sign }} *Workflow:* `${{ github.workflow }}` *Of Repo:* `${{ github.repository }}@${{ github.ref_name }}`\n*Triggered On:* `${{ github.event_name }}` *By User:* `${{ github.actor }}`\n*Commit Msg:* `${{ env.last_commit }}`\n*Pass:* `${{ env.notify_pass }}`\n*Fail:* `${{ env.notify_fail }}`\n*Artifacts:* ${{ steps.CD_backend_reports.outputs.artifact-url }} `Expiring in 90 Days`" }'
