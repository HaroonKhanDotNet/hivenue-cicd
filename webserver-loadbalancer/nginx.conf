# Run Nginx as the 'www-data' user
user www-data;

# Automatically determine the optimal number of worker processes based on available CPU cores
worker_processes auto;

# Specify the PID file location
pid /run/nginx.pid;

# Include all enabled module configurations
include /etc/nginx/modules-enabled/*.conf;

events {
    # Maximum number of simultaneous connections each worker process can handle
    worker_connections 1024;
}

http {
    # Include MIME type definitions for correct Content-Type handling
    include /etc/nginx/mime.types;

    # Default MIME type if no match is found
    default_type application/octet-stream;

    # Optimize file sending and reduce CPU usage
    sendfile on;

    # Optimize packet processing for better performance
    tcp_nopush on;
    tcp_nodelay on;

    # Keep client connections open for up to 65 seconds
    keepalive_timeout 65;

    # Increase the size of the types hash for handling large numbers of MIME types
    types_hash_max_size 2048;

    # Restrict maximum upload size to 20 MB
    client_max_body_size 20M;

    # Enable Gzip compression for better performance
    gzip on;

    # Specify file types to compress with Gzip
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript;

    # Disable server tokens to hide Nginx version information for security
    server_tokens off;

    # SSL Configuration
    ssl_protocols TLSv1.2 TLSv1.3; # Use modern and secure TLS protocols
    ssl_prefer_server_ciphers on;  # Prefer server-defined ciphers over client-specified ones
    ssl_ciphers HIGH:!aNULL:!MD5;  # Define a secure set of ciphers
    ssl_session_cache shared:SSL:10m; # Cache SSL sessions for faster handshakes
    ssl_session_timeout 10m;          # Session timeout after 10 minutes

    # Enforce HTTPS with Strict Transport Security (HSTS)
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains" always;

    # Specify log file locations for access and error logs
    access_log /var/log/nginx/access.log;
    error_log /var/log/nginx/error.log;

    # Include additional configurations from external files
    include /etc/nginx/conf.d/*.conf;
    # Uncomment the next line to include configurations from sites-enabled
    # include /etc/nginx/sites-enabled/*;

    # Configuration for devweb.hivenue.ca
    server {
        # Listen on port 443 with SSL and HTTP/2 enabled
        listen 443 ssl http2;
        server_name ***.hivenue.ca;

        # SSL certificate and key for this server
        ssl_certificate /etc/letsencrypt/live/***.hivenue.ca/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/***.hivenue.ca/privkey.pem;

        # Proxy all traffic to the frontend on localhost:4200
        location / {
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr; # Forward client IP to the backend
            proxy_pass http://localhost:4200/;
        }

        # Proxy WebSocket connections for development purposes
        location /sockjs-node/ {
            proxy_pass http://localhost:4200/sockjs-node/;
            proxy_http_version 1.1;   # Use HTTP/1.1 for WebSocket compatibility
            proxy_set_header Upgrade $http_upgrade; # Enable WebSocket upgrades
            proxy_set_header Connection "Upgrade";
            proxy_set_header Host $host;
        }
    }

    # Redirect HTTP traffic to HTTPS for ***.hivenue.ca
    server {
        listen 80;
        server_name ***.hivenue.ca;
        return 301 https://$host$request_uri; # Perform a permanent redirect
    }

    # Configuration for ***.hivenue.ca
    server {
        listen 443 ssl http2;
        server_name ***.hivenue.ca;

        # Reuse SSL certificate and key from ***.hivenue.ca
        ssl_certificate /etc/letsencrypt/live/***.hivenue.ca/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/***.hivenue.ca/privkey.pem;

        # Proxy API traffic to localhost:3000
        location / {
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_pass http://localhost:3000/;
        }

        # Proxy WebSocket traffic to a backend on localhost:5000
        location /socket.io/ {
            proxy_pass http://localhost:5000/socket.io/;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
            proxy_set_header Host $host;
        }

        # Additional route for chat
        location /chat {
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_pass http://localhost:8080/chat;
        }

        # Additional route for history
        location /history {
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_pass http://localhost:8080/history;
        }
    }

    # Redirect HTTP traffic to HTTPS for ***.hivenue.ca
    server {
        listen 80;
        server_name ***.hivenue.ca;
        return 301 https://$host$request_uri;
    }

    # Configuration for ***.hivenue.ca
    server {
        listen 443 ssl http2;
        server_name ***.hivenue.ca;

        # Reuse SSL certificate and key from ***.hivenue.ca
        ssl_certificate /etc/letsencrypt/live/***.hivenue.ca/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/***.hivenue.ca/privkey.pem;

        # Proxy admin traffic to localhost:4300
        location / {
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_pass http://localhost:4300/;
        }
    }

    # Redirect HTTP traffic to HTTPS for ***.hivenue.ca
    server {
        listen 80;
        server_name ***.hivenue.ca;
        return 301 https://$host$request_uri;
    }

    # Configuration for ***.hivenue.ca
    server {
        listen 443 ssl http2;
        server_name ***.hivenue.ca;

        # Reuse SSL certificate and key from ***.hivenue.ca
        ssl_certificate /etc/letsencrypt/live/***.hivenue.ca/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/***.hivenue.ca/privkey.pem;

        # Proxy admin traffic to localhost:4400
        location / {
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_pass http://localhost:4400/;
        }
    }

    # Redirect HTTP traffic to HTTPS for ***.hivenue.ca
    server {
        listen 80;
        server_name ***.hivenue.ca;
        return 301 https://$host$request_uri;
    }
}
